name: Claude Code Review and Auto-Fix
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  code-review-and-fix:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Check for Claude API Key
        run: |
          if [ -z "${{ secrets.CLAUDE_API_KEY }}" ]; then
            echo "::error::CLAUDE_API_KEY is not set in repository secrets. Please add it before running this workflow."
            exit 1
          fi
      
      - name: Configure Git
        run: |
          git config user.name "Claude AutoFix Bot"
          git config user.email "claude-bot@example.com"
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install Python dependencies
        run: |
          pip install requests
      
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
          override: true
      
      - name: Run Clippy
        run: cargo clippy --all-targets --message-format=json > clippy-results.json || echo "Clippy found issues, continuing workflow"
      
      - name: Run Cargo Audit
        continue-on-error: true
        run: |
          cargo install cargo-audit
          cargo audit --json > audit-results.json || echo "Cargo audit found security issues, continuing workflow"
      
      - name: Copy Python script
        run: |
          cat > analyze_code.py << 'EOL'
          # Paste the Python script here
          EOL
          chmod +x analyze_code.py
      
      - name: Analyze code with Claude
        id: claude-analysis
        env:
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        run: |
          python analyze_code.py
          if grep -q "fixes_available=true" analyze_output.txt; then
            echo "fixes_available=true" >> $GITHUB_OUTPUT
          else
            echo "fixes_available=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Apply fixes
        if: steps.claude-analysis.outputs.fixes_available == 'true'
        id: apply-fixes
        run: |
          python apply_fixes.py fixes.json
          if [ $? -eq 0 ]; then
            echo "fixes_applied=true" >> $GITHUB_OUTPUT
          else
            echo "fixes_applied=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Run cargo check after fixes
        if: steps.apply-fixes.outputs.fixes_applied == 'true'
        run: |
          if cargo check; then
            echo "check_passed=true" >> $GITHUB_OUTPUT
          else
            echo "Warning: Fixed code doesn't compile. Reverting changes..."
            git checkout -- .
            echo "check_passed=false" >> $GITHUB_OUTPUT
          fi
        id: check-fixes
      
      - name: Commit and push changes
        if: steps.apply-fixes.outputs.fixes_applied == 'true' && steps.check-fixes.outputs.check_passed == 'true' && github.event_name == 'pull_request'
        run: |
          git add .
          git commit -m "Apply automated fixes suggested by Claude [skip ci]" || echo "No changes to commit"
          
          PR_BRANCH="${GITHUB_HEAD_REF}"
          git push origin "HEAD:${PR_BRANCH}" || echo "No changes to push"
      
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            let report = '';
            try {
              report = fs.readFileSync('claude-analysis-report.md', 'utf8');
            } catch (error) {
              report = "Error reading analysis report.";
            }
            
            const fixesAvailable = '${{ steps.claude-analysis.outputs.fixes_available }}' === 'true';
            const fixesApplied = '${{ steps.apply-fixes.outputs.fixes_applied }}' === 'true';
            const checksPass = '${{ steps.check-fixes.outputs.check_passed }}' === 'true';
            
            let comment = `## Claude Code Analysis Report\n\n`;
            
            if (fixesAvailable) {
              if (fixesApplied) {
                if (checksPass) {
                  comment += `✅ **Automated fixes have been applied** to your code and the code compiles successfully.\n\n`;
                } else {
                  comment += `⚠️ **Automated fixes were generated** but caused compilation errors and were reverted.\n\n`;
                }
              } else {
                comment += `ℹ️ **Fixes were identified** but could not be applied automatically.\n\n`;
              }
            } else {
              comment += `ℹ️ **Analysis completed**, but no automatic fixes were needed or provided.\n\n`;
            }
            
            comment += `<details><summary>Click to view the full analysis report</summary>\n\n${report}\n</details>`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });